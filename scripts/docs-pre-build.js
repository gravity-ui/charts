const fs = require('node:fs');
const path = require('node:path');

const lodash = require('lodash');
const yaml = require('yaml');

const {getConfig} = require('./utils');

const TMP_DIR = '.tmp';
const regexMdLinks = /\[([^[]+)\](\(.*\))/gm;
const singleMatch = /\[([^[]+)\]\((.*)\)/;
const docsConfig = getConfig();

function getFileLinks(fileText = '') {
    const links = {};
    const matches = fileText.match(regexMdLinks);

    for (let i = 0; i < matches.length; i++) {
        const text = singleMatch.exec(matches[i]);
        const [, key, value] = text;
        if (key !== 'API') {
            links[key] = value;
        }
    }

    return links;
}

function getIndexFilesMap(dirPath, basePath, indexFilesMap = {}) {
    const files = fs.readdirSync(dirPath);
    files.forEach((file) => {
        const filePath = path.join(dirPath, file);
        if (fs.statSync(filePath).isDirectory()) {
            getIndexFilesMap(filePath, basePath, indexFilesMap);
        } else {
            const relativePath = path.relative(basePath, filePath);
            if (file === docsConfig.typedocOptions.entryFileName) {
                const fileText = fs.readFileSync(filePath, {encoding: 'utf8'});
                const fileLinks = getFileLinks(fileText);
                indexFilesMap[relativePath] = fileLinks;
            }
        }
    });

    return indexFilesMap;
}

function getOriginalTocFile() {
    // TODO: throw exeption in case of there is no toc file
    const filePath = path.resolve(process.cwd(), docsConfig.pathToTocFile);
    return yaml.parse(fs.readFileSync(filePath, {encoding: 'utf8'}));
}

const originalTocFile = getOriginalTocFile();
// TODO: throw exeption in case of autogeneratedTocItem === -1
const autogeneratedTocItemIndex = originalTocFile.items.findIndex((item) => item.autodoc);
const autogeneratedTocItem = originalTocFile.items[autogeneratedTocItemIndex];
// TODO: check if autogeneratedTocItem.href starts with ./
const baseTocItemPath = autogeneratedTocItem.href.endsWith('/')
    ? autogeneratedTocItem.href.slice(0, -1)
    : autogeneratedTocItem.href;

const indexFilesMap = getIndexFilesMap(
    path.resolve(docsConfig.typedocOptions.out),
    path.resolve(docsConfig.typedocOptions.out),
);

const apiYamlConfig = Object.entries(indexFilesMap).reduce((acc, [key, value]) => {
    let keyPath = key.split('/').filter(Boolean);

    if (keyPath.length > 1) {
        keyPath = keyPath.slice(0, -1);
    } else {
        acc['Overview'] = `${baseTocItemPath}/${docsConfig.typedocOptions.entryFileName}`;
        return acc;
    }

    Object.keys(value).forEach((vKey) => {
        value[vKey] = `${baseTocItemPath}/${keyPath.join('/')}/${value[vKey]}`;
    });

    value['Overview'] =
        `${baseTocItemPath}/${keyPath.join('/')}/${docsConfig.typedocOptions.entryFileName}`;

    const updates = {};
    lodash.set(updates, keyPath, value);
    lodash.merge(acc, updates);

    return acc;
}, {});

function sortObjectKeys(obj) {
    if (typeof obj !== 'object' || obj === null) return obj;

    const sorted = {};

    if ('Overview' in obj) {
        sorted['Overview'] = obj['Overview'];
    }

    Object.keys(obj)
        .filter((key) => key !== 'Overview')
        .sort()
        .forEach((key) => {
            sorted[key] = sortObjectKeys(obj[key]);
        });

    return sorted;
}

const sortedApiYamlConfig = sortObjectKeys(apiYamlConfig);

function convertToTocItem(config, parentPath = '') {
    return Object.entries(config).map(([key, value]) => {
        if (typeof value === 'object') {
            return {
                name: key,
                items: convertToTocItem(value, `${parentPath}/${key}`),
            };
        }

        return {
            name: key,
            href: value,
        };
    });
}

const tocItems = convertToTocItem(sortedApiYamlConfig, baseTocItemPath);

originalTocFile.items[autogeneratedTocItemIndex] = {
    name: autogeneratedTocItem.name,
    items: tocItems,
};

function createTmpDocs() {
    const tmpPath = path.resolve(process.cwd(), TMP_DIR);
    const timestamp = Date.now();
    const tmpDocsPath = path.join(tmpPath, `docs-${timestamp}`);

    if (!fs.existsSync(tmpPath)) {
        fs.mkdirSync(tmpPath);
    }

    fs.cpSync(path.resolve(docsConfig.pathToDocsFolder), tmpDocsPath, {recursive: true});

    return tmpDocsPath;
}

const tmpDocsPath = createTmpDocs();

fs.writeFileSync(path.resolve(tmpDocsPath, 'toc.yaml'), yaml.stringify(originalTocFile), 'utf8');

console.log(tmpDocsPath);
